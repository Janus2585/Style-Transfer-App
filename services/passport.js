const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys')

const User = mongoose.model('users');

passport.serializeUser((user, done) => {
	done(null, user.id);//user.id is the id automatically generated by MongoDB, not Google
});

passport.deserializeUser((id, done) => {
	User.findById(id)
		.then(user => {
			done(null, user);
		})
});
//declare a new passport strategy using google OAuth 2.0 
passport.use(
  new GoogleStrategy(
    {
		clientID: keys.googleClientID,
		clientSecret: keys.googleClientSecret,
		callbackURL: '/auth/google/callback',
		proxy: true
	}, 
	async (accessToken, refreshToken, profile, done) => {
		//search the database to see if the profile ID is already there.
		const existingUser = await User.findOne({ googleId: profile.id })
			
			if (existingUser) {//existingUser is a modal instance of the user that was found
				//we already have a record with the given profile ID
				return done(null, existingUser);
			}
			//we do not have a record with this ID. Create a new one 
			const user = await new User({ googleId: profile.id, email: profile.emails }).save()
			done(null, user);
				
			
		
	}
  )
);